/* generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.validation;

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.DataType
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Entity
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Navigation
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Screen
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.UiMockupLanguagePackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class UiMockupLanguageValidator extends AbstractUiMockupLanguageValidator {
	
	@Check
	def void checkEntityNameStartsWithCapital(Entity entity) {
		if (!Character.isUpperCase(entity.name.charAt(0))) {
			error("Entity name must start with a capital letter.", entity, UiMockupLanguagePackage.Literals.ENTITY__NAME)
		}
	}

	@Check
	def void checkWidgetNamesUnique(Screen screen) {
		val widgetNames = screen.widgets.map[widget | if(widget typeof WidgetReference) widget.name]
		val duplicateWidgetNames = widgetNames.toSet.filter[name | widgetNames.filter[it == name].size > 1]
		for (duplicateWidgetName : duplicateWidgetNames) {
			error("Widget name '" + duplicateWidgetName + "' is not unique.", screen, UiMockupLanguagePackage.Literals.SCREEN__WIDGETS)
		}
	}

	@Check
	def void checkNavigationTargetExists(Navigation navigation) {
		val targetScreen = navigation.target
		if (targetScreen === null) {
			error("Navigation target screen is not specified.", navigation, UiMockupLanguagePackage.Literals.NAVIGATION__TARGET)
		}
	}

	// Helper method to check if a DataType is valid
	def boolean isDataTypeValid(String dataType) {
		return dataType == DataType::STRING || dataType == DataType::BOOLEAN || dataType == DataType::INTEGER
	}
	
}