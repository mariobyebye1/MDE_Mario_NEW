/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class UiMockupLanguageGenerator extends AbstractGenerator {

override doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as Model
		model.generate(fsa)
		
	}

	// Generate Java Swing code for the Model
	def generate(Model model, IFileSystemAccess2 fsa) {
		for (element : model.elements) {
			switch (element) {
				Entity: element.generate(fsa)
				Screen: element.generate(fsa)
				Navigation: element.generate(fsa)
			}
		}
	}

	// Generate Java Swing code for an Entity
	def generate(Entity entity, IFileSystemAccess2 fsa) {
		fsa.generateFile(entity.name + ".java", '''
			import java.awt.Dimension;
			import javax.swing.*;
			
			public class «entity.name» extends JPanel {
				«IF entity.extendsEntity !== null »
					private «entity.extendsEntity.name» «entity.extendsEntity.name.toFirstLower»;
				«ENDIF»
				«FOR attribute : entity.attributes»
					private «attribute.type» «attribute.name.toFirstLower»;
				«ENDFOR»
			
				public «entity.name»() {
				setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
				initComponents();
				}
				
				private void initComponents() {
					«FOR attribute : entity.attributes»
						«attribute.name.toFirstLower» = new «attribute.type»();
						add(new JLabel("«attribute.name»"));
						add(«attribute.name.toFirstLower»);
					«ENDFOR»
					/* Initialize other components here */
				}
			
				/* Getters and setters for attributes here */
			
				/* Optional methods for additional functionality */
			
			}
		''')
	}

	// Generate Java Swing code for a Screen
	def generate(Screen screen, IFileSystemAccess2 fsa) {
		fsa.generateFile(screen.name + "Screen.java", '''
			import java.awt.Dimension;
			import javax.swing.*;
			
			public class «screen.name»Screen extends JFrame {
				private «screen.entity.name» «screen.entity.name.toFirstLower»;
				«FOR widget : screen.widgets»
					private «widget.label» «widget.name.toFirstLower»;
				«ENDFOR»
				
				public «screen.name»Screen() {
					setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
					setTitle("«screen.name» Screen");
					initComponents();
					pack();
					setVisible(true);
				}
				
				private void initComponents() {
					«screen.entity.name.toFirstLower» = new «screen.entity.name»();
					add(«screen.entity.name.toFirstLower»);
					«FOR widget : screen.widgets»
						«widget.name.toFirstLower» = new «widget.label»();
						«screen.entity.name.toFirstLower».add(new JLabel("«widget.name»"));
						«screen.entity.name.toFirstLower».add(«widget.name.toFirstLower»);
					«ENDFOR»
					/* Initialize other components here */
				}
			
				/* Getters and setters for widgets here */
			
				/* Optional methods for additional functionality */
			
			}
		''')
	}

	// Generate Java Swing code for a Navigation
	def generate(Navigation navigation, IFileSystemAccess2 fsa) {
		fsa.generateFile("Navigation" + navigation.source.name + "To" + navigation.target.name + ".java", '''
			public class Navigation«navigation.source.name»To«navigation.target.name» {
				public void navigate() {
					/* Navigation code here */
				}
			}
		''')
	}

	// Helper method to convert DataType to Java types
	def String getJavaType(DataType dataType) {
		switch (dataType) {
			case DataType::STRING: return "JTextField"
			case DataType::BOOLEAN: return "JCheckBox"
			case DataType::INTEGER: return "JTextField"
			default: return "JComponent"
		}
	}
}
