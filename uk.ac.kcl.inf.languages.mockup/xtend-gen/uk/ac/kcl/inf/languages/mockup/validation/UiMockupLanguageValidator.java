/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.validation;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.DataType;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Entity;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Navigation;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Screen;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.UiMockupLanguagePackage;
import uk.ac.kcl.inf.languages.mockup.uiMockupLanguage.Widget;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class UiMockupLanguageValidator extends AbstractUiMockupLanguageValidator {
  @Check
  public void checkEntityNameStartsWithCapital(final Entity entity) {
    boolean _isUpperCase = Character.isUpperCase(entity.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.error("Entity name must start with a capital letter.", entity, UiMockupLanguagePackage.Literals.ENTITY__NAME);
    }
  }
  
  @Check
  public void checkWidgetNamesUnique(final Screen screen) {
    final Function1<Widget, String> _function = (Widget widget) -> {
      return widget.getName();
    };
    final List<String> widgetNames = ListExtensions.<Widget, String>map(screen.getWidgets(), _function);
    final Function1<String, Boolean> _function_1 = (String name) -> {
      final Function1<String, Boolean> _function_2 = (String it) -> {
        return Boolean.valueOf(Objects.equal(it, name));
      };
      int _size = IterableExtensions.size(IterableExtensions.<String>filter(widgetNames, _function_2));
      return Boolean.valueOf((_size > 1));
    };
    final Iterable<String> duplicateWidgetNames = IterableExtensions.<String>filter(IterableExtensions.<String>toSet(widgetNames), _function_1);
    for (final String duplicateWidgetName : duplicateWidgetNames) {
      this.error((("Widget name \'" + duplicateWidgetName) + "\' is not unique."), screen, UiMockupLanguagePackage.Literals.SCREEN__WIDGETS);
    }
  }
  
  @Check
  public void checkNavigationTargetExists(final Navigation navigation) {
    final Screen targetScreen = navigation.getTarget();
    if ((targetScreen == null)) {
      this.error("Navigation target screen is not specified.", navigation, UiMockupLanguagePackage.Literals.NAVIGATION__TARGET);
    }
  }
  
  public boolean isDataTypeValid(final String dataType) {
    return ((Objects.equal(dataType, DataType.STRING) || Objects.equal(dataType, DataType.BOOLEAN)) || Objects.equal(dataType, DataType.INTEGER));
  }
}
