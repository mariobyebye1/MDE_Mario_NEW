/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import uk.ac.kcl.inf.languages.mockup.services.UiMockupLanguageGrammarAccess;

@SuppressWarnings("all")
public class UiMockupLanguageSyntacticSequencer extends AbstractSyntacticSequencer {

	protected UiMockupLanguageGrammarAccess grammarAccess;
	protected AbstractElementAlias match_PrimaryExpression_BoolLiteralParserRuleCall_1_1_or_StringLiteralParserRuleCall_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (UiMockupLanguageGrammarAccess) access;
		match_PrimaryExpression_BoolLiteralParserRuleCall_1_1_or_StringLiteralParserRuleCall_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getBoolLiteralParserRuleCall_1_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getStringLiteralParserRuleCall_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBoolLiteralRule())
			return getBoolLiteralToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getStringLiteralRule())
			return getStringLiteralToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * BoolLiteral:
	 *     'true' | 'false';
	 */
	protected String getBoolLiteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "true";
	}
	
	/**
	 * @Override 
	 * terminal ID: '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * StringLiteral:
	 *     STRING;
	 */
	protected String getStringLiteralToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_PrimaryExpression_BoolLiteralParserRuleCall_1_1_or_StringLiteralParserRuleCall_2_1.equals(syntax))
				emit_PrimaryExpression_BoolLiteralParserRuleCall_1_1_or_StringLiteralParserRuleCall_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     BoolLiteral | StringLiteral
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '&&' right=PrimaryExpression
	 *     (rule start) (ambiguity) '||' right=AndExpression
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_PrimaryExpression_BoolLiteralParserRuleCall_1_1_or_StringLiteralParserRuleCall_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
