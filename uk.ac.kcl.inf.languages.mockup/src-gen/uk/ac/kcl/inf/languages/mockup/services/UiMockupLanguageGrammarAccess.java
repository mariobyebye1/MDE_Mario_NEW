/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class UiMockupLanguageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cElementsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cElementsEntityParserRuleCall_0_0 = (RuleCall)cElementsAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cElementsScreenParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cElementsNavigationParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		
		//// Entry rule
		//Model:
		//    (elements += Entity | elements += Screen | elements += Navigation)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(elements += Entity | elements += Screen | elements += Navigation)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//elements += Entity
		public Assignment getElementsAssignment_0() { return cElementsAssignment_0; }
		
		//Entity
		public RuleCall getElementsEntityParserRuleCall_0_0() { return cElementsEntityParserRuleCall_0_0; }
		
		//elements += Screen
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }
		
		//Screen
		public RuleCall getElementsScreenParserRuleCall_1_0() { return cElementsScreenParserRuleCall_1_0; }
		
		//elements += Navigation
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }
		
		//Navigation
		public RuleCall getElementsNavigationParserRuleCall_2_0() { return cElementsNavigationParserRuleCall_2_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExtendsEntityAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cExtendsEntityEntityCrossReference_2_1_0 = (CrossReference)cExtendsEntityAssignment_2_1.eContents().get(0);
		private final RuleCall cExtendsEntityEntityIDTerminalRuleCall_2_1_0_1 = (RuleCall)cExtendsEntityEntityCrossReference_2_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAttributesAttributeParserRuleCall_4_0 = (RuleCall)cAttributesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Entity:
		//    'entity' name = ID ('extends' extendsEntity = [Entity])?
		//    '{'
		//    (attributes += Attribute)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'entity' name = ID ('extends' extendsEntity = [Entity])?
		//'{'
		//(attributes += Attribute)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'entity'
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('extends' extendsEntity = [Entity])?
		public Group getGroup_2() { return cGroup_2; }
		
		//'extends'
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }
		
		//extendsEntity = [Entity]
		public Assignment getExtendsEntityAssignment_2_1() { return cExtendsEntityAssignment_2_1; }
		
		//[Entity]
		public CrossReference getExtendsEntityEntityCrossReference_2_1_0() { return cExtendsEntityEntityCrossReference_2_1_0; }
		
		//ID
		public RuleCall getExtendsEntityEntityIDTerminalRuleCall_2_1_0_1() { return cExtendsEntityEntityIDTerminalRuleCall_2_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(attributes += Attribute)*
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//Attribute
		public RuleCall getAttributesAttributeParserRuleCall_4_0() { return cAttributesAttributeParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Attribute:
		//    name = ID ':' type = DataType;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID ':' type = DataType
		public Group getGroup() { return cGroup; }
		
		//name = ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type = DataType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_2_0() { return cTypeDataTypeEnumRuleCall_2_0; }
	}
	public class ScreenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Screen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScreenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEntityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cEntityEntityCrossReference_3_0 = (CrossReference)cEntityAssignment_3.eContents().get(0);
		private final RuleCall cEntityEntityIDTerminalRuleCall_3_0_1 = (RuleCall)cEntityEntityCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cWidgetsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cWidgetsWidgetParserRuleCall_5_0 = (RuleCall)cWidgetsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Screen:
		//    'screen' name = ID 'for' entity = [Entity]
		//    '{'
		//    (widgets += Widget)*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'screen' name = ID 'for' entity = [Entity]
		//'{'
		//(widgets += Widget)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'screen'
		public Keyword getScreenKeyword_0() { return cScreenKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'for'
		public Keyword getForKeyword_2() { return cForKeyword_2; }
		
		//entity = [Entity]
		public Assignment getEntityAssignment_3() { return cEntityAssignment_3; }
		
		//[Entity]
		public CrossReference getEntityEntityCrossReference_3_0() { return cEntityEntityCrossReference_3_0; }
		
		//ID
		public RuleCall getEntityEntityIDTerminalRuleCall_3_0_1() { return cEntityEntityIDTerminalRuleCall_3_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//(widgets += Widget)*
		public Assignment getWidgetsAssignment_5() { return cWidgetsAssignment_5; }
		
		//Widget
		public RuleCall getWidgetsWidgetParserRuleCall_5_0() { return cWidgetsWidgetParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class WidgetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Widget");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCheckboxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Widget:
		//    TextField | Checkbox | Button ;
		@Override public ParserRule getRule() { return rule; }
		
		//TextField | Checkbox | Button
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TextField
		public RuleCall getTextFieldParserRuleCall_0() { return cTextFieldParserRuleCall_0; }
		
		//Checkbox
		public RuleCall getCheckboxParserRuleCall_1() { return cCheckboxParserRuleCall_1; }
		
		//Button
		public RuleCall getButtonParserRuleCall_2() { return cButtonParserRuleCall_2; }
	}
	public class TextFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.TextField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelExpressionParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		
		//TextField:
		//    'text' name = ID ('label' label = Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'text' name = ID ('label' label = Expression)?
		public Group getGroup() { return cGroup; }
		
		//'text'
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('label' label = Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//label = Expression
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//Expression
		public RuleCall getLabelExpressionParserRuleCall_2_1_0() { return cLabelExpressionParserRuleCall_2_1_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckboxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelExpressionParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		
		//Checkbox:
		//    'checkbox' name = ID ('label' label = Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'checkbox' name = ID ('label' label = Expression)?
		public Group getGroup() { return cGroup; }
		
		//'checkbox'
		public Keyword getCheckboxKeyword_0() { return cCheckboxKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('label' label = Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//label = Expression
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//Expression
		public RuleCall getLabelExpressionParserRuleCall_2_1_0() { return cLabelExpressionParserRuleCall_2_1_0; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLabelKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cLabelAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cLabelExpressionParserRuleCall_2_1_0 = (RuleCall)cLabelAssignment_2_1.eContents().get(0);
		
		//Button:
		//    'button' name = ID ('label' label = Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name = ID ('label' label = Expression)?
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('label' label = Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'label'
		public Keyword getLabelKeyword_2_0() { return cLabelKeyword_2_0; }
		
		//label = Expression
		public Assignment getLabelAssignment_2_1() { return cLabelAssignment_2_1; }
		
		//Expression
		public RuleCall getLabelExpressionParserRuleCall_2_1_0() { return cLabelExpressionParserRuleCall_2_1_0; }
	}
	public class NavigationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Navigation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNavigateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSourceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSourceScreenCrossReference_2_0 = (CrossReference)cSourceAssignment_2.eContents().get(0);
		private final RuleCall cSourceScreenIDTerminalRuleCall_2_0_1 = (RuleCall)cSourceScreenCrossReference_2_0.eContents().get(1);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetScreenCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetScreenIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetScreenCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWhenKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_5_1_0 = (RuleCall)cConditionAssignment_5_1.eContents().get(0);
		
		//Navigation:
		//    'navigate' 'from' source = [Screen] 'to' target = [Screen]
		//    ('when' condition = Condition)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'navigate' 'from' source = [Screen] 'to' target = [Screen]
		//('when' condition = Condition)?
		public Group getGroup() { return cGroup; }
		
		//'navigate'
		public Keyword getNavigateKeyword_0() { return cNavigateKeyword_0; }
		
		//'from'
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//source = [Screen]
		public Assignment getSourceAssignment_2() { return cSourceAssignment_2; }
		
		//[Screen]
		public CrossReference getSourceScreenCrossReference_2_0() { return cSourceScreenCrossReference_2_0; }
		
		//ID
		public RuleCall getSourceScreenIDTerminalRuleCall_2_0_1() { return cSourceScreenIDTerminalRuleCall_2_0_1; }
		
		//'to'
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//target = [Screen]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }
		
		//[Screen]
		public CrossReference getTargetScreenCrossReference_4_0() { return cTargetScreenCrossReference_4_0; }
		
		//ID
		public RuleCall getTargetScreenIDTerminalRuleCall_4_0_1() { return cTargetScreenIDTerminalRuleCall_4_0_1; }
		
		//('when' condition = Condition)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'when'
		public Keyword getWhenKeyword_5_0() { return cWhenKeyword_5_0; }
		
		//condition = Condition
		public Assignment getConditionAssignment_5_1() { return cConditionAssignment_5_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_5_1_0() { return cConditionConditionParserRuleCall_5_1_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Condition:
		//    'if' expression = Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' expression = Expression
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//expression = Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.Expression");
		private final RuleCall cOrExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    OrExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//OrExpression
		public RuleCall getOrExpressionParserRuleCall() { return cOrExpressionParserRuleCall; }
	}
	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//OrExpression returns Expression:
		//    AndExpression ('||' right = AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ('||' right = AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//('||' right = AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }
		
		//right = AndExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_1_0() { return cRightAndExpressionParserRuleCall_1_1_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AndExpression returns Expression:
		//    PrimaryExpression ('&&' right = PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ('&&' right = PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//('&&' right = PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//right = PrimaryExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_0() { return cRightPrimaryExpressionParserRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFeatureCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final RuleCall cBoolLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//PrimaryExpression returns Expression:
		//       FeatureCall | {Expression} BoolLiteral | {Expression} StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//FeatureCall | {Expression} BoolLiteral | {Expression} StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FeatureCall
		public RuleCall getFeatureCallParserRuleCall_0() { return cFeatureCallParserRuleCall_0; }
		
		//{Expression} BoolLiteral
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression}
		public Action getExpressionAction_1_0() { return cExpressionAction_1_0; }
		
		//BoolLiteral
		public RuleCall getBoolLiteralParserRuleCall_1_1() { return cBoolLiteralParserRuleCall_1_1; }
		
		//{Expression} StringLiteral
		public Group getGroup_2() { return cGroup_2; }
		
		//{Expression}
		public Action getExpressionAction_2_0() { return cExpressionAction_2_0; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2_1() { return cStringLiteralParserRuleCall_2_1; }
	}
	public class FeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.FeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		
		//FeatureCall:
		//    {FeatureCall} ID ('(' arguments += Expression (',' arguments += Expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{FeatureCall} ID ('(' arguments += Expression (',' arguments += Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//{FeatureCall}
		public Action getFeatureCallAction_0() { return cFeatureCallAction_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('(' arguments += Expression (',' arguments += Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//arguments += Expression
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_0() { return cArgumentsExpressionParserRuleCall_2_1_0; }
		
		//(',' arguments += Expression)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments += Expression
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_2_1_0() { return cArgumentsExpressionParserRuleCall_2_2_1_0; }
	}
	public class BoolLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.BoolLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolLiteral:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.StringLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//    STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	public class DataTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSTRINGStringKeyword_0_0 = (Keyword)cSTRINGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOOLEANBooleanKeyword_1_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEGEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTEGERIntegerKeyword_2_0 = (Keyword)cINTEGEREnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DataType:
		//    STRING = 'String'|
		//    BOOLEAN = 'Boolean'|
		//    INTEGER = 'Integer';
		public EnumRule getRule() { return rule; }
		
		//STRING = 'String'|
		//BOOLEAN = 'Boolean'|
		//INTEGER = 'Integer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING = 'String'
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_0() { return cSTRINGEnumLiteralDeclaration_0; }
		
		//'String'
		public Keyword getSTRINGStringKeyword_0_0() { return cSTRINGStringKeyword_0_0; }
		
		//BOOLEAN = 'Boolean'
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_1() { return cBOOLEANEnumLiteralDeclaration_1; }
		
		//'Boolean'
		public Keyword getBOOLEANBooleanKeyword_1_0() { return cBOOLEANBooleanKeyword_1_0; }
		
		//INTEGER = 'Integer'
		public EnumLiteralDeclaration getINTEGEREnumLiteralDeclaration_2() { return cINTEGEREnumLiteralDeclaration_2; }
		
		//'Integer'
		public Keyword getINTEGERIntegerKeyword_2_0() { return cINTEGERIntegerKeyword_2_0; }
	}
	
	private final ModelElements pModel;
	private final EntityElements pEntity;
	private final AttributeElements pAttribute;
	private final DataTypeElements eDataType;
	private final ScreenElements pScreen;
	private final WidgetElements pWidget;
	private final TextFieldElements pTextField;
	private final CheckboxElements pCheckbox;
	private final ButtonElements pButton;
	private final NavigationElements pNavigation;
	private final ConditionElements pCondition;
	private final ExpressionElements pExpression;
	private final OrExpressionElements pOrExpression;
	private final AndExpressionElements pAndExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final FeatureCallElements pFeatureCall;
	private final BoolLiteralElements pBoolLiteral;
	private final StringLiteralElements pStringLiteral;
	private final TerminalRule tID;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public UiMockupLanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pEntity = new EntityElements();
		this.pAttribute = new AttributeElements();
		this.eDataType = new DataTypeElements();
		this.pScreen = new ScreenElements();
		this.pWidget = new WidgetElements();
		this.pTextField = new TextFieldElements();
		this.pCheckbox = new CheckboxElements();
		this.pButton = new ButtonElements();
		this.pNavigation = new NavigationElements();
		this.pCondition = new ConditionElements();
		this.pExpression = new ExpressionElements();
		this.pOrExpression = new OrExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pFeatureCall = new FeatureCallElements();
		this.pBoolLiteral = new BoolLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.languages.mockup.UiMockupLanguage.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.languages.mockup.UiMockupLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// Entry rule
	//Model:
	//    (elements += Entity | elements += Screen | elements += Navigation)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Entity:
	//    'entity' name = ID ('extends' extendsEntity = [Entity])?
	//    '{'
	//    (attributes += Attribute)*
	//    '}';
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Attribute:
	//    name = ID ':' type = DataType;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//enum DataType:
	//    STRING = 'String'|
	//    BOOLEAN = 'Boolean'|
	//    INTEGER = 'Integer';
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Screen:
	//    'screen' name = ID 'for' entity = [Entity]
	//    '{'
	//    (widgets += Widget)*
	//    '}';
	public ScreenElements getScreenAccess() {
		return pScreen;
	}
	
	public ParserRule getScreenRule() {
		return getScreenAccess().getRule();
	}
	
	//Widget:
	//    TextField | Checkbox | Button ;
	public WidgetElements getWidgetAccess() {
		return pWidget;
	}
	
	public ParserRule getWidgetRule() {
		return getWidgetAccess().getRule();
	}
	
	//TextField:
	//    'text' name = ID ('label' label = Expression)?;
	public TextFieldElements getTextFieldAccess() {
		return pTextField;
	}
	
	public ParserRule getTextFieldRule() {
		return getTextFieldAccess().getRule();
	}
	
	//Checkbox:
	//    'checkbox' name = ID ('label' label = Expression)?;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//Button:
	//    'button' name = ID ('label' label = Expression)?;
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//Navigation:
	//    'navigate' 'from' source = [Screen] 'to' target = [Screen]
	//    ('when' condition = Condition)?;
	public NavigationElements getNavigationAccess() {
		return pNavigation;
	}
	
	public ParserRule getNavigationRule() {
		return getNavigationAccess().getRule();
	}
	
	//Condition:
	//    'if' expression = Expression;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Expression:
	//    OrExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//OrExpression returns Expression:
	//    AndExpression ('||' right = AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return pOrExpression;
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}
	
	//AndExpression returns Expression:
	//    PrimaryExpression ('&&' right = PrimaryExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//PrimaryExpression returns Expression:
	//       FeatureCall | {Expression} BoolLiteral | {Expression} StringLiteral;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//FeatureCall:
	//    {FeatureCall} ID ('(' arguments += Expression (',' arguments += Expression)*)?;
	public FeatureCallElements getFeatureCallAccess() {
		return pFeatureCall;
	}
	
	public ParserRule getFeatureCallRule() {
		return getFeatureCallAccess().getRule();
	}
	
	//BoolLiteral:
	//    'true' | 'false';
	public BoolLiteralElements getBoolLiteralAccess() {
		return pBoolLiteral;
	}
	
	public ParserRule getBoolLiteralRule() {
		return getBoolLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//    STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//@Override
	//terminal ID: '^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '0'..'9' | '_')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//@Override
	//terminal STRING: '"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
