/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.languages.mockup.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.languages.mockup.ide.contentassist.antlr.internal.InternalUiMockupLanguageParser;
import uk.ac.kcl.inf.languages.mockup.services.UiMockupLanguageGrammarAccess;

public class UiMockupLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(UiMockupLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, UiMockupLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getWidgetAccess().getAlternatives(), "rule__Widget__Alternatives");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getBoolLiteralAccess().getAlternatives(), "rule__BoolLiteral__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
			builder.put(grammarAccess.getScreenAccess().getGroup(), "rule__Screen__Group__0");
			builder.put(grammarAccess.getTextFieldAccess().getGroup(), "rule__TextField__Group__0");
			builder.put(grammarAccess.getTextFieldAccess().getGroup_2(), "rule__TextField__Group_2__0");
			builder.put(grammarAccess.getCheckboxAccess().getGroup(), "rule__Checkbox__Group__0");
			builder.put(grammarAccess.getCheckboxAccess().getGroup_2(), "rule__Checkbox__Group_2__0");
			builder.put(grammarAccess.getButtonAccess().getGroup(), "rule__Button__Group__0");
			builder.put(grammarAccess.getButtonAccess().getGroup_2(), "rule__Button__Group_2__0");
			builder.put(grammarAccess.getNavigationAccess().getGroup(), "rule__Navigation__Group__0");
			builder.put(grammarAccess.getNavigationAccess().getGroup_5(), "rule__Navigation__Group_5__0");
			builder.put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
			builder.put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_1(), "rule__PrimaryExpression__Group_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup(), "rule__FeatureCall__Group__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_2(), "rule__FeatureCall__Group_2__0");
			builder.put(grammarAccess.getFeatureCallAccess().getGroup_2_2(), "rule__FeatureCall__Group_2_2__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_0(), "rule__Model__ElementsAssignment_0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_1(), "rule__Model__ElementsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment_2(), "rule__Model__ElementsAssignment_2");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getExtendsEntityAssignment_2_1(), "rule__Entity__ExtendsEntityAssignment_2_1");
			builder.put(grammarAccess.getEntityAccess().getAttributesAssignment_4(), "rule__Entity__AttributesAssignment_4");
			builder.put(grammarAccess.getAttributeAccess().getNameAssignment_0(), "rule__Attribute__NameAssignment_0");
			builder.put(grammarAccess.getAttributeAccess().getTypeAssignment_2(), "rule__Attribute__TypeAssignment_2");
			builder.put(grammarAccess.getScreenAccess().getNameAssignment_1(), "rule__Screen__NameAssignment_1");
			builder.put(grammarAccess.getScreenAccess().getEntityAssignment_3(), "rule__Screen__EntityAssignment_3");
			builder.put(grammarAccess.getScreenAccess().getWidgetsAssignment_5(), "rule__Screen__WidgetsAssignment_5");
			builder.put(grammarAccess.getTextFieldAccess().getNameAssignment_1(), "rule__TextField__NameAssignment_1");
			builder.put(grammarAccess.getTextFieldAccess().getLabelAssignment_2_1(), "rule__TextField__LabelAssignment_2_1");
			builder.put(grammarAccess.getCheckboxAccess().getNameAssignment_1(), "rule__Checkbox__NameAssignment_1");
			builder.put(grammarAccess.getCheckboxAccess().getLabelAssignment_2_1(), "rule__Checkbox__LabelAssignment_2_1");
			builder.put(grammarAccess.getButtonAccess().getNameAssignment_1(), "rule__Button__NameAssignment_1");
			builder.put(grammarAccess.getButtonAccess().getLabelAssignment_2_1(), "rule__Button__LabelAssignment_2_1");
			builder.put(grammarAccess.getNavigationAccess().getSourceAssignment_2(), "rule__Navigation__SourceAssignment_2");
			builder.put(grammarAccess.getNavigationAccess().getTargetAssignment_4(), "rule__Navigation__TargetAssignment_4");
			builder.put(grammarAccess.getNavigationAccess().getConditionAssignment_5_1(), "rule__Navigation__ConditionAssignment_5_1");
			builder.put(grammarAccess.getConditionAccess().getExpressionAssignment_1(), "rule__Condition__ExpressionAssignment_1");
			builder.put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1(), "rule__OrExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1(), "rule__AndExpression__RightAssignment_1_1");
			builder.put(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_1(), "rule__FeatureCall__ArgumentsAssignment_2_1");
			builder.put(grammarAccess.getFeatureCallAccess().getArgumentsAssignment_2_2_1(), "rule__FeatureCall__ArgumentsAssignment_2_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private UiMockupLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalUiMockupLanguageParser createParser() {
		InternalUiMockupLanguageParser result = new InternalUiMockupLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public UiMockupLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(UiMockupLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
